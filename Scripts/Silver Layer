------ 11.Convert Silver Layer From Bronze Layer with DataWarehouse Creation Date ------
-- ======== 1. crm form ====================

IF OBJECT_ID ('Silver.crm_cust_info','U') IS NOT NULL 
DROP TABLE Silver.crm_cust_info


CREATE TABLE Silver.crm_cust_info(
cst_id INT,
cst_key VARCHAR(50),
cst_firstname VARCHAR(50),
cst_lastname VARCHAR(50),
cst_material_status VARCHAR(50),
cst_gndr VARCHAR(50),
cst_create_date DATE,
dwh_create_date DATETIME DEFAULT GETDATE()
);

IF OBJECT_ID ('Silver.crm_prd_info','U') IS NOT NULL 
DROP TABLE Silver.crm_prd_info


CREATE TABLE Silver.crm_prd_info(
prd_id INT,
prd_key VARCHAR(50),
prd_nm VARCHAR(50),
prd_cost INT,
prd_line VARCHAR(50),
prd_start_dt DATE,
prd_end_dt DATE,
dwh_create_date DATETIME DEFAULT GETDATE()
);


IF OBJECT_ID ('Silver.crm_sales_details','U') IS NOT NULL 
DROP TABLE Silver.crm_sales_details


CREATE TABLE Silver.crm_sales_details(
sls_ord_num VARCHAR(50),
sls_prd_key VARCHAR(50),
sls_cust_id INT,
sls_order_dt DATE,
sls_ship_dt DATE,
sls_due_dt DATE,
sls_sales INT,
sls_quantity INT,
sls_price INT,
dwh_create_date DATETIME DEFAULT GETDATE()
);


-- ======== 2.erp form ====================

IF OBJECT_ID ('Silver.erp_cust_az12','U') IS NOT NULL 
DROP TABLE Silver.erp_cust_az12

CREATE TABLE Silver.erp_cust_az12(
cid VARCHAR(50),
bdate DATE,
gen VARCHAR(50),
dwh_create_date DATETIME DEFAULT GETDATE()
);

IF OBJECT_ID ('Silver.erp_loc_al01','U') IS NOT NULL 
DROP TABLE Silver.erp_loc_al01


CREATE TABLE Silver.erp_loc_al01(
cid VARCHAR(50),
cntry VARCHAR(50),
dwh_create_date DATETIME DEFAULT GETDATE()
);



IF OBJECT_ID ('Silver.erp_px_cat_glv2','U') IS NOT NULL 
DROP TABLE Silver.erp_px_cat_glv2

CREATE TABLE Silver.erp_px_cat_glv2(
id VARCHAR(50),
cat VARCHAR(50),
subcat VARCHAR(50),
maintainance VARCHAR(50),
dwh_create_date DATETIME DEFAULT GETDATE()
);

--  -------- 1. crm_cust_info table ---------------


-- 1. Quality Check [cst_id is Primary key (unique and not null)]

SELECT * FROM Bronze.crm_cust_info;


SELECT cst_id,COUNT(*) FROM Bronze.crm_cust_info GROUP BY cst_id HAVING COUNT(*)>1;

SELECT cst_id,COUNT(*) FROM Bronze.crm_cust_info GROUP BY cst_id HAVING COUNT(*)>1 OR cst_id IS NULL;

SELECT *, ROW_NUMBER()OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info;

SELECT *, RANK()OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info;

SELECT *,DENSE_RANK()OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info;


SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info)T WHERE row_numbers != 1;

SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info)T WHERE row_numbers = 1;

SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info WHERE cst_id IS NOT NULL)T WHERE row_numbers=1;

-- 2.Quality Check : Naming Spaces remove.

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname
FROM (
SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info WHERE cst_id IS NOT NULL)
T WHERE row_numbers=1;

-- 3.Quality Check : Use case statement for Data Standardization and Data Normalization. 

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname, 
CASE WHEN UPPER(TRIM(cst_material_status)) ='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status)) ='S' THEN 'Single'
     ELSE 'N/A'
     END AS cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr)) ='M' THEN 'Male'
     WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
     ELSE 'N/A'
     END AS cst_gndr,
     cst_create_date
FROM (
SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info WHERE cst_id IS NOT NULL)
T WHERE row_numbers=1;


------ 12.Insert data into Silver Layer Silver.crm_cust_info with DataWarehouse Creation Date ------

INSERT INTO Silver.crm_cust_info (
cst_id,
cst_key,
cst_firstname ,
cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date) 

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname, 
CASE WHEN UPPER(TRIM(cst_material_status)) ='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status)) ='S' THEN 'Single'
     ELSE 'N/A'
     END AS cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr)) ='M' THEN 'Male'
     WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
     ELSE 'N/A'
     END AS cst_gndr,
     cst_create_date
FROM (
SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info WHERE cst_id IS NOT NULL)
T WHERE row_numbers=1;


-- 13.Check and Verify Insert data into Silver Layer Silver.crm_cust_info with DataWarehouse Creation Date -------------
SELECT * FROM Silver.crm_cust_info;

-- TRUNCATE TABLE Silver.crm_cust_info;


--  -------- 2. crm_prd_info table ---------------
SELECT * FROM Bronze.crm_prd_info;

-- 1.Quality Check: [prd_id Primary Key (unique and not null)]

SELECT prd_id,COUNT(*) FROM Bronze.crm_prd_info GROUP BY prd_id HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- 2.Quality Check: [prd_key Primary Key (unique and not null) and spilt as per requirement]
SELECT prd_id,prd_key FROM Bronze.crm_prd_info;

SELECT prd_id,prd_key,SUBSTRING(prd_key,1,5)AS prd_substring FROM Bronze.crm_prd_info;

SELECT prd_id,REPLACE (SUBSTRING(prd_key,1,5),'-','_') AS prd_key FROM Bronze.crm_prd_info;

SELECT prd_id,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key
FROM Bronze.crm_prd_info;

-- 3.Quality Check: [prd_nm]

SELECT prd_id,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm
FROM Bronze.crm_prd_info;

-- 4.Quality Check: [prd_cost]
SELECT prd_id,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm,
ISNULL(prd_cost,0)AS prd_cost
FROM Bronze.crm_prd_info;

-- 5.Quality Check: [prd_line is check data consistency]
SELECT prd_id,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm,
ISNULL(prd_cost,0)AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line))='M' THEN 'Mountain'
     WHEN UPPER(TRIM(prd_line))='R' THEN 'Road'
     WHEN UPPER(TRIM(prd_line))='S' THEN 'Other Sales'
     WHEN UPPER(TRIM(prd_line))='T' THEN 'Touring'
     ELSE 'N/A'
     END AS prd_line
FROM Bronze.crm_prd_info;

-- 6.[prd_start_dt]

SELECT prd_id,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm,
ISNULL(prd_cost,0)AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line))='M' THEN 'Mountain'
     WHEN UPPER(TRIM(prd_line))='R' THEN 'Road'
     WHEN UPPER(TRIM(prd_line))='S' THEN 'Other Sales'
     WHEN UPPER(TRIM(prd_line))='T' THEN 'Touring'
     ELSE 'N/A'
     END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt
FROM Bronze.crm_prd_info;


--7.[prd_end_dt]
SELECT prd_id,
REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm,
ISNULL(prd_cost,0)AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line))='M' THEN 'Mountain'
     WHEN UPPER(TRIM(prd_line))='R' THEN 'Road'
     WHEN UPPER(TRIM(prd_line))='S' THEN 'Other Sales'
     WHEN UPPER(TRIM(prd_line))='T' THEN 'Touring'
     ELSE 'N/A'
     END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
FROM Bronze.crm_prd_info;


------ 14.Insert data into Silver Layer Silver.crm_prd_info with DataWarehouse Creation Date ------

INSERT INTO Silver.crm_prd_info (
prd_id,
prd_key,
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt)

SELECT prd_id,
-- REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm,
ISNULL(prd_cost,0)AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line))='M' THEN 'Mountain'
     WHEN UPPER(TRIM(prd_line))='R' THEN 'Road'
     WHEN UPPER(TRIM(prd_line))='S' THEN 'Other Sales'
     WHEN UPPER(TRIM(prd_line))='T' THEN 'Touring'
     ELSE 'N/A'
     END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
FROM Bronze.crm_prd_info;

-- 15.Check and Verify Insert data into Silver Layer Silver.crm_prd_info with DataWarehouse Creation Date -------------
SELECT * FROM Silver.crm_prd_info;


--  -------- 3. crm_sales_details table ---------------
SELECT * FROM Bronze.crm_sales_details;

-- 1.Quality Check: [sls_ord_num Primary Key (unique and not null)]

SELECT sls_ord_num,COUNT(*) FROM Bronze.crm_sales_details GROUP BY sls_ord_num HAVING COUNT(*) > 1 OR sls_ord_num IS NULL;

-- 2.Quality Check: [sls_ord_num,sls_prd_key,sls_cust_id]
SELECT sls_ord_num,sls_prd_key,sls_cust_id FROM Bronze.crm_sales_details;

-- 3.Quality Check: [sls_ord_dt,sls_ship_dt,sls_due_dt]

SELECT sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt<0 OR LEN(sls_order_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) 
     END AS sls_order_dt,
CASE WHEN sls_ship_dt<0 OR LEN(sls_ship_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) 
     END AS sls_ship_dt,
CASE WHEN sls_due_dt<0 OR LEN(sls_due_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) 
     END AS sls_due_dt
FROM Bronze.crm_sales_details;

-- 4.Quality Check: [sls_sales,sls_quantity,sls_price]
SELECT * FROM Bronze.crm_sales_details WHERE sls_sales=0 OR sls_sales IS NULL;

SELECT sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt<0 OR LEN(sls_order_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) 
     END AS sls_order_dt,
CASE WHEN sls_ship_dt<0 OR LEN(sls_ship_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) 
     END AS sls_ship_dt,
CASE WHEN sls_due_dt<0 OR LEN(sls_due_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) 
     END AS sls_due_dt,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales!= sls_quantity* ABS(sls_price) THEN sls_quantity * ABS(sls_price)
ELSE sls_sales END AS sls_sales,
sls_quantity,
CASE WHEN sls_price IS NULL OR sls_price <= 0 THEN sls_sales/NULLIF(sls_quantity,0)
ELSE sls_price
END AS sls_price
FROM Bronze.crm_sales_details;

------ 16.Insert data into Silver Layer Silver.crm_sales_details with DataWarehouse Creation Date ------

INSERT INTO Silver.crm_sales_details (
sls_ord_num,
sls_prd_key,
sls_cust_id ,
sls_order_dt,
sls_ship_dt,
sls_due_dt ,
sls_sales ,
sls_quantity ,
sls_price )

SELECT sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt<0 OR LEN(sls_order_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) 
     END AS sls_order_dt,
CASE WHEN sls_ship_dt<0 OR LEN(sls_ship_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) 
     END AS sls_ship_dt,
CASE WHEN sls_due_dt<0 OR LEN(sls_due_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) 
     END AS sls_due_dt,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales!= sls_quantity* ABS(sls_price) THEN sls_quantity * ABS(sls_price)
ELSE sls_sales END AS sls_sales,
sls_quantity,
CASE WHEN sls_price IS NULL OR sls_price <= 0 THEN sls_sales/NULLIF(sls_quantity,0)
ELSE sls_price
END AS sls_price
FROM Bronze.crm_sales_details;

-- 16.Check and Verify Insert data into Silver Layer Silver.crm_sales_details with DataWarehouse Creation Date -------------
SELECT * FROM Silver.crm_sales_details;

--  -------- 5.erp_cust__az12 table --------------
SELECT * FROM Bronze.erp_cust_az12;

--  1.Quality Check: [cid Primary Key (unique and not null)]
SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
ELSE cid
END AS cid
FROM Bronze.erp_cust_az12;

--  2.Quality Check: [bdate]
SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
ELSE cid
END AS cid,
CASE WHEN bdate>GETDATE() THEN NULL
ELSE bdate
END AS bdate
FROM Bronze.erp_cust_az12;

--  3.Quality Check: [gen]
SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
ELSE cid
END AS cid,
CASE WHEN bdate>GETDATE() THEN NULL
ELSE bdate
END AS bdate,
CASE WHEN UPPER(gen) IN ('F','Female') THEN 'Female'
     WHEN UPPER(gen) IN ('M','Male') THEN 'Male'
     ELSE 'N/A' END AS gen
FROM Bronze.erp_cust_az12;


------ 17.Insert data into Silver Layer Silver.erp_cust_az12 with DataWarehouse Creation Date ------

INSERT INTO Silver.erp_cust_az12(
cid,
bdate,
gen )

SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
ELSE cid
END AS cid,
CASE WHEN bdate>GETDATE() THEN NULL
ELSE bdate
END AS bdate,
CASE WHEN UPPER(gen) IN ('F','Female') THEN 'Female'
     WHEN UPPER(gen) IN ('M','Male') THEN 'Male'
     ELSE 'N/A' END AS gen
FROM Bronze.erp_cust_az12;

-- 18.Check and Verify Insert data into Silver Layer Silver.erp_cust_az12 with DataWarehouse Creation Date -------------
SELECT * FROM Silver.erp_cust_az12;


--  -------- 5.erp_loc_al01 table ---------------

SELECT * FROM Bronze.erp_loc_al01;


--  1.Quality Check: [cid Primary Key (unique and not null)]
SELECT 
 REPLACE (cid,'-','') AS cid
FROM Bronze.erp_loc_al01;

--  2.Quality Check: [cntry]
SELECT 
 REPLACE (cid,'-','') AS cid,
 CASE WHEN TRIM(cntry)='DE' THEN 'Germany'
      WHEN TRIM(cntry) IN ('US','USA') THEN 'United States'
      WHEN TRIM(cntry) ='' OR TRIM(cntry) IS NULL THEN 'N/A'
      ELSE TRIM(cntry)
      END AS cntry
FROM Bronze.erp_loc_al01;

------ 19.Insert data into Silver Layer Silver.erp_loc_al01 with DataWarehouse Creation Date ------

INSERT INTO Silver.erp_loc_al01(
cid,
cntry)

SELECT 
 REPLACE (cid,'-','') AS cid,
 CASE WHEN TRIM(cntry)='DE' THEN 'Germany'
      WHEN TRIM(cntry) IN ('US','USA') THEN 'United States'
      WHEN TRIM(cntry) ='' OR TRIM(cntry) IS NULL THEN 'N/A'
      ELSE TRIM(cntry)
      END AS cntry
FROM Bronze.erp_loc_al01;

-- 20.Check and Verify Insert data into Silver Layer Silver.erp_loc_al01 with DataWarehouse Creation Date -------------
SELECT * FROM Silver.erp_loc_al01;

--  -------- 6.erp_px_cat_glv2 table ---------------

SELECT * FROM Bronze.erp_px_cat_glv2;

-- 1.Quality Check: [id,cat,subcat,maintainance] 
SELECT 
id,cat,subcat,maintainance
FROM Bronze.erp_px_cat_glv2;

------ 20.Insert data into Silver Layer Silver.erp_px_cat_glv2 with DataWarehouse Creation Date ------

INSERT INTO Silver.erp_px_cat_glv2
(id,
cat,
subcat,
maintainance)

SELECT 
id,cat,subcat,maintainance
FROM Bronze.erp_px_cat_glv2;

-- 20.Check and Verify Insert data into Silver Layer Silver.erp_px_cat_glv2 with DataWarehouse Creation Date -------------
SELECT * FROM Silver.erp_px_cat_glv2;



-- 21. All tables Truncate and loading along with print statement

PRINT '==============================';
PRINT 'Loading  Silver Layer';
PRINT '==============================';


PRINT '==============================';
PRINT 'Loading  CRM Tables';
PRINT '==============================';


PRINT '====== 1.Truncate for Silver.crm_cust_info Table =====';
TRUNCATE TABLE Silver.crm_cust_info;

PRINT '====== 1.Insert data into Silver Layer Silver.crm_cust_info =====';

INSERT INTO Silver.crm_cust_info (
cst_id,
cst_key,
cst_firstname ,
cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date) 

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname, 
CASE WHEN UPPER(TRIM(cst_material_status)) ='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status)) ='S' THEN 'Single'
     ELSE 'N/A'
     END AS cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr)) ='M' THEN 'Male'
     WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
     ELSE 'N/A'
     END AS cst_gndr,
     cst_create_date
FROM (
SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info WHERE cst_id IS NOT NULL)
T WHERE row_numbers=1;


PRINT '====== 2.Truncate for Silver.crm_prd_info Table =====';
TRUNCATE TABLE Silver.crm_prd_info;

PRINT '====== 2. Insert data into Silver Layer Silver.crm_prd_info Table ======';

INSERT INTO Silver.crm_prd_info (
prd_id,
prd_key,
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt)

SELECT prd_id,
-- REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm,
ISNULL(prd_cost,0)AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line))='M' THEN 'Mountain'
     WHEN UPPER(TRIM(prd_line))='R' THEN 'Road'
     WHEN UPPER(TRIM(prd_line))='S' THEN 'Other Sales'
     WHEN UPPER(TRIM(prd_line))='T' THEN 'Touring'
     ELSE 'N/A'
     END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
FROM Bronze.crm_prd_info;


PRINT '====== 3.Truncate for Silver.crm_sales_details Table =====';
TRUNCATE TABLE Silver.crm_sales_details;

PRINT '====== 3.Insert data into Silver Layer Silver.crm_sales_details Table ======';

INSERT INTO Silver.crm_sales_details (
sls_ord_num,
sls_prd_key,
sls_cust_id ,
sls_order_dt,
sls_ship_dt,
sls_due_dt ,
sls_sales ,
sls_quantity ,
sls_price )

SELECT sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt<0 OR LEN(sls_order_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) 
     END AS sls_order_dt,
CASE WHEN sls_ship_dt<0 OR LEN(sls_ship_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) 
     END AS sls_ship_dt,
CASE WHEN sls_due_dt<0 OR LEN(sls_due_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) 
     END AS sls_due_dt,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales!= sls_quantity* ABS(sls_price) THEN sls_quantity * ABS(sls_price)
ELSE sls_sales END AS sls_sales,
sls_quantity,
CASE WHEN sls_price IS NULL OR sls_price <= 0 THEN sls_sales/NULLIF(sls_quantity,0)
ELSE sls_price
END AS sls_price
FROM Bronze.crm_sales_details;


PRINT '==============================';
PRINT 'Loading ERP Tables';
PRINT '==============================';


PRINT '====== 4.Truncate for Silver.erp_cust_az12 Table =====';
TRUNCATE TABLE Silver.erp_cust_az12;

PRINT '====== 4.Insert data into Silver Layer Silver.erp_cust_az12 Table ======';

INSERT INTO Silver.erp_cust_az12 (
cid,
bdate,
gen )

SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
ELSE cid
END AS cid,
CASE WHEN bdate>GETDATE() THEN NULL
ELSE bdate
END AS bdate,
CASE WHEN UPPER(gen) IN ('F','Female') THEN 'Female'
     WHEN UPPER(gen) IN ('M','Male') THEN 'Male'
     ELSE 'N/A' END AS gen
FROM Bronze.erp_cust_az12;





PRINT '====== 5.Truncate for Silver.erp_loc_al01 Table =====';
TRUNCATE TABLE Silver.erp_loc_al01;

PRINT '====== 5.Insert data into Silver Layer Silver.erp_loc_al01 Table ======';

INSERT INTO Silver.erp_loc_al01 (
cid,
cntry )

SELECT 
 REPLACE (cid,'-','') AS cid,
 CASE WHEN TRIM(cntry)='DE' THEN 'Germany'
      WHEN TRIM(cntry) IN ('US','USA') THEN 'United States'
      WHEN TRIM(cntry) ='' OR TRIM(cntry) IS NULL THEN 'N/A'
      ELSE TRIM(cntry)
      END AS cntry
FROM Bronze.erp_loc_al01;



PRINT '====== 6.Truncate for Silver.erp_px_cat_glv2 Table =====';
TRUNCATE TABLE Silver.erp_px_cat_glv2;

PRINT '====== 6.Insert data into Silver Layer Silver.erp_px_cat_glv2 Table ======';

INSERT INTO Silver.erp_px_cat_glv2
(id,
cat,
subcat,
maintainance)

SELECT 
id,cat,subcat,maintainance
FROM Bronze.erp_px_cat_glv2;



-- 22.Create Procedure for silver layer.

CREATE PROCEDURE Silver.load_silver AS

BEGIN 

DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME

BEGIN TRY

SET @batch_start_time=GETDATE();
PRINT '==============================';
PRINT 'Starts Loading Silver Layer';
PRINT '==============================';


PRINT '==============================';
PRINT 'Loading  CRM Tables';
PRINT '==============================';

SET @start_time=GETDATE();
PRINT '====== 1.Truncate for Silver.crm_cust_info Table =====';
TRUNCATE TABLE Silver.crm_cust_info;

PRINT '====== 1.Insert data into Silver Layer Silver.crm_cust_info =====';

INSERT INTO Silver.crm_cust_info (
cst_id,
cst_key,
cst_firstname ,
cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date) 

SELECT 
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname, 
CASE WHEN UPPER(TRIM(cst_material_status)) ='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status)) ='S' THEN 'Single'
     ELSE 'N/A'
     END AS cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr)) ='M' THEN 'Male'
     WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
     ELSE 'N/A'
     END AS cst_gndr,
     cst_create_date
FROM (
SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS row_numbers FROM Bronze.crm_cust_info WHERE cst_id IS NOT NULL)
T WHERE row_numbers=1;

SET @end_time=GETDATE();

PRINT 'Duration of time Silver.crm_cust_info is '+ CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR)+' seconds';



SET @start_time=GETDATE();

PRINT '====== 2.Truncate for Silver.crm_prd_info Table =====';
TRUNCATE TABLE Silver.crm_prd_info;

PRINT '====== 2. Insert data into Silver Layer Silver.crm_prd_info Table ======';

INSERT INTO Silver.crm_prd_info (
prd_id,
prd_key,
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt)

SELECT prd_id,
-- REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
SUBSTRING (prd_key,7,LEN(prd_key))AS prd_key,
prd_nm,
ISNULL(prd_cost,0)AS prd_cost,
CASE WHEN UPPER(TRIM(prd_line))='M' THEN 'Mountain'
     WHEN UPPER(TRIM(prd_line))='R' THEN 'Road'
     WHEN UPPER(TRIM(prd_line))='S' THEN 'Other Sales'
     WHEN UPPER(TRIM(prd_line))='T' THEN 'Touring'
     ELSE 'N/A'
     END AS prd_line,
CAST(prd_start_dt AS DATE) AS prd_start_dt,
CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
FROM Bronze.crm_prd_info;

SET @end_time=GETDATE();

PRINT 'Duration of time Silver.crm_prd_info is '+ CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR)+' seconds';


SET @start_time=GETDATE();
PRINT '====== 3.Truncate for Silver.crm_sales_details Table =====';
TRUNCATE TABLE Silver.crm_sales_details;

PRINT '====== 3.Insert data into Silver Layer Silver.crm_sales_details Table ======';

INSERT INTO Silver.crm_sales_details (
sls_ord_num,
sls_prd_key,
sls_cust_id ,
sls_order_dt,
sls_ship_dt,
sls_due_dt ,
sls_sales ,
sls_quantity ,
sls_price )

SELECT sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt<0 OR LEN(sls_order_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_order_dt AS VARCHAR)AS DATE) 
     END AS sls_order_dt,
CASE WHEN sls_ship_dt<0 OR LEN(sls_ship_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_ship_dt AS VARCHAR)AS DATE) 
     END AS sls_ship_dt,
CASE WHEN sls_due_dt<0 OR LEN(sls_due_dt)!=8 THEN NULL
     ELSE CAST(CAST(sls_due_dt AS VARCHAR)AS DATE) 
     END AS sls_due_dt,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales!= sls_quantity* ABS(sls_price) THEN sls_quantity * ABS(sls_price)
ELSE sls_sales END AS sls_sales,
sls_quantity,
CASE WHEN sls_price IS NULL OR sls_price <= 0 THEN sls_sales/NULLIF(sls_quantity,0)
ELSE sls_price
END AS sls_price
FROM Bronze.crm_sales_details;

SET @end_time=GETDATE();

PRINT 'Duration of time Silver.crm_sales_details is '+ CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR)+' seconds';





PRINT '==============================';
PRINT 'Loading ERP Tables';
PRINT '==============================';

SET @start_time=GETDATE();

PRINT '====== 4.Truncate for Silver.erp_cust_az12 Table =====';
TRUNCATE TABLE Silver.erp_cust_az12;

PRINT '====== 4.Insert data into Silver Layer Silver.erp_cust_az12 Table ======';

INSERT INTO Silver.erp_cust_az12 (
cid,
bdate,
gen )

SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,LEN(cid))
ELSE cid
END AS cid,
CASE WHEN bdate>GETDATE() THEN NULL
ELSE bdate
END AS bdate,
CASE WHEN UPPER(gen) IN ('F','Female') THEN 'Female'
     WHEN UPPER(gen) IN ('M','Male') THEN 'Male'
     ELSE 'N/A' END AS gen
FROM Bronze.erp_cust_az12;

SET @end_time=GETDATE();

PRINT 'Duration of time Silver.erp_loc_al01 is '+ CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR)+' seconds';


SET @start_time=GETDATE();

PRINT '====== 5.Truncate for Silver.erp_loc_al01 Table =====';
TRUNCATE TABLE Silver.erp_loc_al01;

PRINT '====== 5.Insert data into Silver Layer Silver.erp_loc_al01 Table ======';

INSERT INTO Silver.erp_loc_al01 (
cid,
cntry )

SELECT 
 REPLACE (cid,'-','') AS cid,
 CASE WHEN TRIM(cntry)='DE' THEN 'Germany'
      WHEN TRIM(cntry) IN ('US','USA') THEN 'United States'
      WHEN TRIM(cntry) ='' OR TRIM(cntry) IS NULL THEN 'N/A'
      ELSE TRIM(cntry)
      END AS cntry
FROM Bronze.erp_loc_al01;

SET @end_time=GETDATE();

PRINT 'Duration of time Silver.erp_cust_az12 is '+ CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR)+' seconds';


SET @start_time=GETDATE();

PRINT '====== 6.Truncate for Silver.erp_px_cat_glv2 Table =====';
TRUNCATE TABLE Silver.erp_px_cat_glv2;

PRINT '====== 6.Insert data into Silver Layer Silver.erp_px_cat_glv2 Table ======';

INSERT INTO Silver.erp_px_cat_glv2
(id,
cat,
subcat,
maintainance)

SELECT 
id,cat,subcat,maintainance
FROM Bronze.erp_px_cat_glv2;

SET @end_time=GETDATE();

PRINT 'Duration of time Silver.erp_px_cat_glv2 is '+ CAST(DATEDIFF(SECOND,@start_time,@end_time) AS VARCHAR)+' seconds';

SET @batch_end_time=GETDATE();

PRINT 'Duration of time of Silver is '+ CAST(DATEDIFF(SECOND,@batch_start_time,@batch_end_time) AS VARCHAR)+' seconds';

PRINT '==============================';
PRINT 'Ends Loading Silver Layer';
PRINT '==============================';

END TRY

BEGIN CATCH

PRINT 'Error Message Getting';
PRINT 'Error Message :'+ERROR_MESSAGE();
PRINT 'Error Message :'+CAST(ERROR_NUMBER()AS VARCHAR);
PRINT 'Error Message :'+CAST(ERROR_STATE()AS VARCHAR);

END CATCH

END; 

EXEC Silver.load_silver;
